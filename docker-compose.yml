version: '3.7'

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.0}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}/${POSTGRES_DB}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - airflow-dags:/opt/airflow/dags
    - airflow-logs:/opt/airflow/logs
    - airflow-plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    - redis
    - postgres


services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - cluster

  mysql:
    image: mysql:8.0.17
    container_name: mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost","-u","root","-psecret"]
      interval: 30s
      timeout: 1s
      retries: 20
    ports:
        - "13306:3306"
    volumes:
        - mysql-db:/var/lib/mysql
    environment:
        MYSQL_ROOT_USER: ${MYSQL_ROOT_USER}
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    networks:
      - cluster

  redis:
    image: redis:latest
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - cluster

  hadoop-master:
    hostname: hadoop-master
    build:
      context: hadoop
    image: hadoop
    container_name: hadoop-master
    depends_on:
      - mysql
      - hadoop-datanode
    environment:
      - nodeType=nameNone
    volumes:
      - hadoop-namenode:/opt/hadoop/data/nameNode
    ports:
      - "9870:9870"   # hadoop
      - "8088:8088"   # hadoop cluster
      - "9000:9000"   # hdfs
      - "10000:10000" # hive server2
      - "14000:14000" # webhdfs
    restart: always
    networks:
        - cluster

  hadoop-datanode:
    hostname: hadoop-datanode
    image: hadoop
    container_name: hadoop-datanode
    environment:
      - nodeType=dataNone
    volumes:
      - hadoop-datanode:/opt/hadoop/data/dataNode
    restart: always
    networks:
      - cluster

  hue:
    image: gethue/hue:latest
    container_name: hue
    command: /bin/bash startup.sh
    depends_on:
      - mysql
    ports:
      - "8888:8888"
    volumes:
      - ./hue/z-hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
      - ./hue/startup.sh:/usr/share/hue/startup.sh
    environment:
      DB_HOST: ${MYSQL_HOST}
      DB_PORT: ${MYSQL_PORT}
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    networks:
      - cluster

  spark-master:
    hostname: spark-master
    build:
      context: spark
    image: spark
    container_name: spark-master
    restart: always
    environment:
      - nodeType=master
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
    ports:
      - "4040:4040" # spark ui
      - "4080:8080"
      - "8998:8998" # livy rest
      - "8899:8899" # jupyter
    volumes:
      - jupyter-data:/opt/notebook/data
      - jupyter-scripts:/opt/notebook/scripts
    networks:
      - cluster

  spark-slave:
    build:
      context: spark
    image: spark
    container_name: spark-slave
    restart: always
    environment:
      - nodeType=slave
      - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - cluster

  zookeeper:
    hostname: zookeeper
    build:
      context: zookeeper
    image: zookeeper
    restart: always
    container_name: zookeeper
    command: zookeeper,zookeeper-2 1
    environment:
      - constraint:node==zookeeper
    ports:
      - 2181:2181
    networks:
      - cluster

  zookeeper-2:
    hostname: zookeeper-2
    image: zookeeper
    restart: always
    command: zookeeper,zookeeper-2 2
    container_name: zookeeper-2
    networks:
      - cluster

  kafka-broker1:
    depends_on:
      - zookeeper
    hostname: kafka-broker1
    build:
      context: kafka
    image: kafka
    container_name: kafka-broker1
    restart: always
    command: kafka-broker1,kafka-broker2 1
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    ports:
      - "9091:9091"
    networks:
      - cluster

  kafka-broker2:
    depends_on:
      - zookeeper
    hostname: kafka-broker2
    image: kafka
    container_name: kafka-broker2
    restart: always
    command: kafka-broker1,kafka-broker2 2
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - cluster

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - cluster

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - cluster

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - cluster

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - cluster

  flower:
    <<: *airflow-common
    container_name: flower
    command: celery flower
    ports:
      - 8555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - cluster

networks:
  cluster:

volumes:
  postgres-db:
  mysql-db:
  hadoop-namenode:
  hadoop-datanode:
  jupyter-scripts:
  jupyter-data:
  airflow-dags:
  airflow-logs:
  airflow-plugins:
